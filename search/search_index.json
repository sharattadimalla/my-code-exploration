{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sharat C Tadimalla I am a technology polyglot with a decade of experience in software and data engineering and analytics.","title":"Home"},{"location":"#sharat-c-tadimalla","text":"I am a technology polyglot with a decade of experience in software and data engineering and analytics.","title":"Sharat C Tadimalla"},{"location":"git_basics/","text":"Fundamentals git is open source version control system created by Linus Travolds (creater of Linux) git project consists of 3 main directories - the working directory , the staging directory and the git directory . the working directory is where you add, edit and delete files The changes are staged into the staging area After you commit your changes, the snapshot of the files are copied into the git directory","title":"Concepts"},{"location":"git_basics/#fundamentals","text":"git is open source version control system created by Linus Travolds (creater of Linux) git project consists of 3 main directories - the working directory , the staging directory and the git directory . the working directory is where you add, edit and delete files The changes are staged into the staging area After you commit your changes, the snapshot of the files are copied into the git directory","title":"Fundamentals"},{"location":"git_commands/","text":"Basic git commands initialize local git repo git init clone a remote repository git clone https://path/to/remote-repository add files to staging area git add filename.txt set user specific config values git config --global user.name name display the list of changed files together with the files yet to be committed git status send local commits to remote branch git push origin master create a new branch and automatically switch to it git checkout -b branch_name view all remote repositories git remote -v add local repo to a remote git remote add origin https://path/to/remote-repo remove a connection to the specified remote repo git remote rm origin list all branches git branch remove a local branch git branch -d branch_name merge a branch into an active one git merge branch_name list conflict agains the base file git diff --base filename view conflicts between branches git diff source_branch target_branch list all present conflicts git diff","title":"Commands"},{"location":"git_commands/#basic-git-commands","text":"","title":"Basic git commands"},{"location":"git_commands/#initialize-local-git-repo","text":"git init","title":"initialize local git repo"},{"location":"git_commands/#clone-a-remote-repository","text":"git clone https://path/to/remote-repository","title":"clone a remote repository"},{"location":"git_commands/#add-files-to-staging-area","text":"git add filename.txt","title":"add files to staging area"},{"location":"git_commands/#set-user-specific-config-values","text":"git config --global user.name name","title":"set user specific config values"},{"location":"git_commands/#display-the-list-of-changed-files-together-with-the-files-yet-to-be-committed","text":"git status","title":"display the list of changed files together with the files yet to be committed"},{"location":"git_commands/#send-local-commits-to-remote-branch","text":"git push origin master","title":"send local commits to remote branch"},{"location":"git_commands/#create-a-new-branch-and-automatically-switch-to-it","text":"git checkout -b branch_name","title":"create a new branch and automatically switch to it"},{"location":"git_commands/#view-all-remote-repositories","text":"git remote -v","title":"view all remote repositories"},{"location":"git_commands/#add-local-repo-to-a-remote","text":"git remote add origin https://path/to/remote-repo","title":"add local repo to a remote"},{"location":"git_commands/#remove-a-connection-to-the-specified-remote-repo","text":"git remote rm origin","title":"remove a connection to the specified remote repo"},{"location":"git_commands/#list-all-branches","text":"git branch","title":"list all branches"},{"location":"git_commands/#remove-a-local-branch","text":"git branch -d branch_name","title":"remove a local branch"},{"location":"git_commands/#merge-a-branch-into-an-active-one","text":"git merge branch_name","title":"merge a branch into an active one"},{"location":"git_commands/#list-conflict-agains-the-base-file","text":"git diff --base filename","title":"list conflict agains the base file"},{"location":"git_commands/#view-conflicts-between-branches","text":"git diff source_branch target_branch","title":"view conflicts between branches"},{"location":"git_commands/#list-all-present-conflicts","text":"git diff","title":"list all present conflicts"},{"location":"git_installation/","text":"Git Installation brew install git","title":"Installation"},{"location":"git_installation/#git-installation","text":"brew install git","title":"Git Installation"},{"location":"git_workflows/","text":"Git Workflows A workflow is a receipe for getting work done What are the Different types of workflows? Centralized Workflow Feature Branch Workflow Gitflow Workflow Forking Workflow Centralized Workflow teams transitioning from SVN has a central repo that serves as a place for all changes to the project default branch is master and all changes are comitted here. Advantages * every developer gets a local copy of the repo * access to git's branching and merge model Feature branch workflow core idea is all feature development should take place in a dedicated branch instead of master Advantage Allows multiple developers to work in parallel without distrubing the main codebase master branch should never contain broken code Gitflow workflow strict branching model designed around releases Assigns roles to different branches and defines how and when they should interact Forking workflow fundamentally different than other workflows instead of a single server side repo as a central codebase, it gives every developer a server side repo each contributor has 2 git repos - private local one & public server side Which workflow to use? Workflow that works for the team A workflow that does not become a burden to the team Chosen workflow should not limit producitivity Does this workflow impose any cognitive overhead?","title":"Git Workflows"},{"location":"git_workflows/#git-workflows","text":"A workflow is a receipe for getting work done","title":"Git Workflows"},{"location":"git_workflows/#what-are-the-different-types-of-workflows","text":"Centralized Workflow Feature Branch Workflow Gitflow Workflow Forking Workflow","title":"What are the Different types of workflows?"},{"location":"git_workflows/#centralized-workflow","text":"teams transitioning from SVN has a central repo that serves as a place for all changes to the project default branch is master and all changes are comitted here. Advantages * every developer gets a local copy of the repo * access to git's branching and merge model","title":"Centralized Workflow"},{"location":"git_workflows/#feature-branch-workflow","text":"core idea is all feature development should take place in a dedicated branch instead of master Advantage Allows multiple developers to work in parallel without distrubing the main codebase master branch should never contain broken code","title":"Feature branch workflow"},{"location":"git_workflows/#gitflow-workflow","text":"strict branching model designed around releases Assigns roles to different branches and defines how and when they should interact","title":"Gitflow workflow"},{"location":"git_workflows/#forking-workflow","text":"fundamentally different than other workflows instead of a single server side repo as a central codebase, it gives every developer a server side repo each contributor has 2 git repos - private local one & public server side","title":"Forking workflow"},{"location":"git_workflows/#which-workflow-to-use","text":"Workflow that works for the team A workflow that does not become a burden to the team Chosen workflow should not limit producitivity Does this workflow impose any cognitive overhead?","title":"Which workflow to use?"}]}